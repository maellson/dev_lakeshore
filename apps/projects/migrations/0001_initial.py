# Generated by Django 5.1.4 on 2025-07-13 21:55

import django.core.validators
import django.db.models.deletion
import projects.models.project
import simple_history.models
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("core", "0001_initial"),
        ("leads", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="IncorporationStatus",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Unique code for system reference",
                        max_length=50,
                        unique=True,
                        verbose_name="Code",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Display name for users",
                        max_length=100,
                        verbose_name="Name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description",
                        verbose_name="Description",
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        help_text="Icon code or emoji",
                        max_length=50,
                        verbose_name="Icon",
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        blank=True,
                        help_text="Hex color code (#000000)",
                        max_length=7,
                        verbose_name="Color",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Display order (lower first)",
                        verbose_name="Display Order",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this option is active",
                        verbose_name="Is Active",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Status of Incorporation",
                "verbose_name_plural": "Status of Incorporations",
                "db_table": "projects_status_incorporacao",
            },
        ),
        migrations.CreateModel(
            name="IncorporationType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Unique code for system reference",
                        max_length=50,
                        unique=True,
                        verbose_name="Code",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Display name for users",
                        max_length=100,
                        verbose_name="Name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description",
                        verbose_name="Description",
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        help_text="Icon code or emoji",
                        max_length=50,
                        verbose_name="Icon",
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        blank=True,
                        help_text="Hex color code (#000000)",
                        max_length=7,
                        verbose_name="Color",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Display order (lower first)",
                        verbose_name="Display Order",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this option is active",
                        verbose_name="Is Active",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Type of Incorporation",
                "verbose_name_plural": "Types of Incorporation",
                "db_table": "projects_tipo_incorporacao",
            },
        ),
        migrations.CreateModel(
            name="OwnerType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Unique code for system reference",
                        max_length=50,
                        unique=True,
                        verbose_name="Code",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Display name for users",
                        max_length=100,
                        verbose_name="Name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description",
                        verbose_name="Description",
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        help_text="Icon code or emoji",
                        max_length=50,
                        verbose_name="Icon",
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        blank=True,
                        help_text="Hex color code (#000000)",
                        max_length=7,
                        verbose_name="Color",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Display order (lower first)",
                        verbose_name="Display Order",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this option is active",
                        verbose_name="Is Active",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Owner Type",
                "verbose_name_plural": "Owner Types",
                "db_table": "projects_owner_type",
            },
        ),
        migrations.CreateModel(
            name="PaymentMethod",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Unique code for system reference",
                        max_length=50,
                        unique=True,
                        verbose_name="Code",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Display name for users",
                        max_length=100,
                        verbose_name="Name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description",
                        verbose_name="Description",
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        help_text="Icon code or emoji",
                        max_length=50,
                        verbose_name="Icon",
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        blank=True,
                        help_text="Hex color code (#000000)",
                        max_length=7,
                        verbose_name="Color",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Display order (lower first)",
                        verbose_name="Display Order",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this option is active",
                        verbose_name="Is Active",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Payment Method",
                "verbose_name_plural": "Payment Methods",
                "db_table": "projects_payment_method",
            },
        ),
        migrations.CreateModel(
            name="ProductionCell",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Unique code for system reference",
                        max_length=50,
                        unique=True,
                        verbose_name="Code",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Display name for users",
                        max_length=100,
                        verbose_name="Name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description",
                        verbose_name="Description",
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        help_text="Icon code or emoji",
                        max_length=50,
                        verbose_name="Icon",
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        blank=True,
                        help_text="Hex color code (#000000)",
                        max_length=7,
                        verbose_name="Color",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Display order (lower first)",
                        verbose_name="Display Order",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this option is active",
                        verbose_name="Is Active",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Production Cell",
                "verbose_name_plural": "Production Cells",
                "db_table": "projects_production_cell",
            },
        ),
        migrations.CreateModel(
            name="ProjectStatus",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Unique code for system reference",
                        max_length=50,
                        unique=True,
                        verbose_name="Code",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Display name for users",
                        max_length=100,
                        verbose_name="Name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description",
                        verbose_name="Description",
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        help_text="Icon code or emoji",
                        max_length=50,
                        verbose_name="Icon",
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        blank=True,
                        help_text="Hex color code (#000000)",
                        max_length=7,
                        verbose_name="Color",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Display order (lower first)",
                        verbose_name="Display Order",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this option is active",
                        verbose_name="Is Active",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Status of Project",
                "verbose_name_plural": "Status of Projects",
                "db_table": "projects_status_project",
            },
        ),
        migrations.CreateModel(
            name="ProjectType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Unique code for system reference",
                        max_length=50,
                        unique=True,
                        verbose_name="Code",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Display name for users",
                        max_length=100,
                        verbose_name="Name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description",
                        verbose_name="Description",
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        help_text="Icon code or emoji",
                        max_length=50,
                        verbose_name="Icon",
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        blank=True,
                        help_text="Hex color code (#000000)",
                        max_length=7,
                        verbose_name="Color",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Display order (lower first)",
                        verbose_name="Display Order",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this option is active",
                        verbose_name="Is Active",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Type Project",
                "verbose_name_plural": "Types Projects",
                "db_table": "projects_type_project",
            },
        ),
        migrations.CreateModel(
            name="StatusContract",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Unique code for system reference",
                        max_length=50,
                        unique=True,
                        verbose_name="Code",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Display name for users",
                        max_length=100,
                        verbose_name="Name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description",
                        verbose_name="Description",
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        help_text="Icon code or emoji",
                        max_length=50,
                        verbose_name="Icon",
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        blank=True,
                        help_text="Hex color code (#000000)",
                        max_length=7,
                        verbose_name="Color",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Display order (lower first)",
                        verbose_name="Display Order",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this option is active",
                        verbose_name="Is Active",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Status of Contract",
                "verbose_name_plural": "Status of Contracts",
                "db_table": "projects_status_contract",
            },
        ),
        migrations.CreateModel(
            name="Contract",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "contract_number",
                    models.CharField(
                        blank=True,
                        help_text="Número único do contrato (gerado automaticamente se vazio)",
                        max_length=50,
                        unique=True,
                        verbose_name="Número do Contrato",
                    ),
                ),
                (
                    "contract_value",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Total value of all units in the contract",
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                        verbose_name="Contract Value",
                    ),
                ),
                (
                    "management_company",
                    models.CharField(
                        choices=[("L. Lira", "L. Lira"), ("H & S", "H & S")],
                        default="L. Lira",
                        help_text="Type of management for this contract",
                        max_length=50,
                        verbose_name="Type of Management",
                    ),
                ),
                (
                    "sign_date",
                    models.DateField(
                        help_text="Signature date of the contract (when it was signed)",
                        verbose_name="Signature Date",
                    ),
                ),
                (
                    "payment_date",
                    models.DateField(
                        help_text="Payment date of the contract",
                        verbose_name="Payment Date",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Created date of the contract",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date of the last update",
                        verbose_name="Last Updated",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this contract",
                        on_delete=django.db.models.deletion.RESTRICT,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "lead",
                    models.ForeignKey(
                        help_text="Lead que originou este contrato",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="contract",
                        to="leads.lead",
                        verbose_name="Lead Origem",
                    ),
                ),
            ],
            options={
                "verbose_name": "Contract",
                "verbose_name_plural": "Contracts",
                "ordering": ["-sign_date"],
            },
        ),
        migrations.CreateModel(
            name="ContractOwner",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "percentual_propriedade",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Percentual de participação no contrato (0.01 a 100.00)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01")),
                            django.core.validators.MaxValueValidator(Decimal("100.00")),
                        ],
                        verbose_name="Percentual de Propriedade (%)",
                    ),
                ),
                (
                    "observations",
                    models.TextField(
                        blank=True,
                        help_text="Additional information about the owner",
                        verbose_name="Observations",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Last Updated"),
                ),
                (
                    "client",
                    models.ForeignKey(
                        help_text="Cliente que é proprietário neste contrato",
                        limit_choices_to=models.Q(
                            ("tipo_usuario__code", "CLIENT"), ("is_active", True)
                        ),
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="contracts_as_owner",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Client",
                    ),
                ),
                (
                    "contract",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="owners",
                        to="projects.contract",
                        verbose_name="Contract",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this lead",
                        on_delete=django.db.models.deletion.RESTRICT,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "owner_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="projects.ownertype",
                        verbose_name="Tipo de Proprietário",
                    ),
                ),
            ],
            options={
                "verbose_name": "Contract Owner",
                "verbose_name_plural": "Contract Owners",
                "ordering": [
                    "-percentual_propriedade",
                    "client__first_name",
                    "client__last_name",
                ],
            },
        ),
        migrations.CreateModel(
            name="Incorporation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Ex: Condomínio Vila Bella, Casa dos Santos, Lote 45",
                        max_length=200,
                        verbose_name="name of Incorporation",
                    ),
                ),
                (
                    "project_description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of what will be built",
                        verbose_name="Project Description",
                    ),
                ),
                (
                    "launch_date",
                    models.DateField(
                        blank=True,
                        help_text="Launch date for sales",
                        null=True,
                        verbose_name="Launch Date",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Indicates if the incorporation is currently active",
                        verbose_name="Active Incorporation",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Last Updated"),
                ),
                (
                    "county",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="incorporations",
                        to="core.county",
                        verbose_name="County/Condado",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this incorporation",
                        on_delete=django.db.models.deletion.RESTRICT,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "incorporation_status",
                    models.ForeignKey(
                        help_text="Current status of the incorporation",
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="projects.incorporationstatus",
                        verbose_name="Status of Incorporation",
                    ),
                ),
                (
                    "incorporation_type",
                    models.ForeignKey(
                        help_text="Type of incorporation (e.g. Land Development, Residential Complex, etc.)",
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="projects.incorporationtype",
                        verbose_name="Type of Incorporation",
                    ),
                ),
            ],
            options={
                "verbose_name": "Incorporation",
                "verbose_name_plural": "Incorporations",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="contract",
            name="incorporation",
            field=models.ForeignKey(
                help_text="Incorporation associated with this contract",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="contracts",
                to="projects.incorporation",
                verbose_name="Incorporation",
            ),
        ),
        migrations.CreateModel(
            name="HistoricalIncorporation",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Ex: Condomínio Vila Bella, Casa dos Santos, Lote 45",
                        max_length=200,
                        verbose_name="name of Incorporation",
                    ),
                ),
                (
                    "project_description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of what will be built",
                        verbose_name="Project Description",
                    ),
                ),
                (
                    "launch_date",
                    models.DateField(
                        blank=True,
                        help_text="Launch date for sales",
                        null=True,
                        verbose_name="Launch Date",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Indicates if the incorporation is currently active",
                        verbose_name="Active Incorporation",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="Created At"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="Last Updated"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "county",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.county",
                        verbose_name="County/Condado",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="User who created this incorporation",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "incorporation_status",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Current status of the incorporation",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="projects.incorporationstatus",
                        verbose_name="Status of Incorporation",
                    ),
                ),
                (
                    "incorporation_type",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Type of incorporation (e.g. Land Development, Residential Complex, etc.)",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="projects.incorporationtype",
                        verbose_name="Type of Incorporation",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Incorporation",
                "verbose_name_plural": "historical Incorporations",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="ModelProject",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Ex: Casa Tipo A, Townhouse Padrão, Terreno Comercial",
                        max_length=200,
                        verbose_name="Name of the Model",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Unique code for identification , like M1, C2, T3",
                        max_length=50,
                        unique=True,
                        verbose_name="Code of the Model",
                    ),
                ),
                (
                    "builders_fee",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Fee charged by the builder for this model",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(
                                Decimal("10000.00")
                            )
                        ],
                        verbose_name="Fee for Builders",
                    ),
                ),
                (
                    "area_padrao",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Área padrão para este tipo de projeto",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                        verbose_name="Área Padrão (m²)",
                    ),
                ),
                (
                    "area_construida_padrao",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Área construída padrão (0 para terrenos)",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Área Construída Padrão (m²)",
                    ),
                ),
                (
                    "especificacoes_padrao",
                    models.TextField(
                        blank=True,
                        help_text="Especificações técnicas padrão para este modelo",
                        verbose_name="Especificações Padrão",
                    ),
                ),
                (
                    "materiais_padrao",
                    models.TextField(
                        blank=True,
                        help_text="Lista de materiais típicos para este modelo",
                        verbose_name="Materiais Padrão",
                    ),
                ),
                (
                    "custo_base_estimado",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Custo base estimado para este modelo",
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Custo Base Estimado",
                    ),
                ),
                (
                    "custo_por_m2",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Custo estimado por metro quadrado",
                        max_digits=8,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Custo por m² (R$/m²)",
                    ),
                ),
                (
                    "duracao_construcao_dias",
                    models.IntegerField(
                        help_text="Duração estimada da construção em dias",
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="Duração Estimada (dias)",
                    ),
                ),
                (
                    "requisitos_especiais",
                    models.TextField(
                        blank=True,
                        help_text="Requisitos especiais para este tipo de projeto",
                        verbose_name="Requisitos Especiais",
                    ),
                ),
                (
                    "regulamentacoes_county",
                    models.TextField(
                        blank=True,
                        help_text="Regulamentações específicas do county para este modelo",
                        verbose_name="Regulamentações do County",
                    ),
                ),
                (
                    "versao",
                    models.CharField(
                        default="1.0",
                        help_text="Versão do modelo (ex: 1.0, 1.1, 2.0)",
                        max_length=10,
                        verbose_name="Versão",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Se este modelo está ativo para uso",
                        verbose_name="Is Active",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Last Updated"),
                ),
                (
                    "county",
                    models.ForeignKey(
                        help_text="County onde este modelo é aplicável",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="modelos_projeto",
                        to="core.county",
                        verbose_name="County/Condado",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="models_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created by",
                    ),
                ),
                (
                    "project_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="modelos_projeto",
                        to="projects.projecttype",
                        verbose_name="Tipo Base do Projeto",
                    ),
                ),
            ],
            options={
                "verbose_name": "Model of Project",
                "verbose_name_plural": "Models of Projects",
                "ordering": ["county", "project_type", "name"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalContractOwner",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "percentual_propriedade",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Percentual de participação no contrato (0.01 a 100.00)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01")),
                            django.core.validators.MaxValueValidator(Decimal("100.00")),
                        ],
                        verbose_name="Percentual de Propriedade (%)",
                    ),
                ),
                (
                    "observations",
                    models.TextField(
                        blank=True,
                        help_text="Additional information about the owner",
                        verbose_name="Observations",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="Created At"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="Last Updated"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "client",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Cliente que é proprietário neste contrato",
                        limit_choices_to=models.Q(
                            ("tipo_usuario__code", "CLIENT"), ("is_active", True)
                        ),
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Client",
                    ),
                ),
                (
                    "contract",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="projects.contract",
                        verbose_name="Contract",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="User who created this lead",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "owner_type",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="projects.ownertype",
                        verbose_name="Tipo de Proprietário",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Contract Owner",
                "verbose_name_plural": "historical Contract Owners",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name="contract",
            name="payment_method",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="contracts",
                to="projects.paymentmethod",
                verbose_name="Forma de Pagamento",
            ),
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "project_name",
                    models.CharField(
                        help_text="Descriptive name of the project",
                        max_length=200,
                        verbose_name="Project Name",
                    ),
                ),
                (
                    "address",
                    models.TextField(
                        help_text="address of the project", verbose_name="address"
                    ),
                ),
                (
                    "area_total",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.01"),
                        help_text="Área total do lote/terreno/unidade",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                        verbose_name="Área Total (m²)",
                    ),
                ),
                (
                    "construction_cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Real construction cost of the project",
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Construction Cost",
                    ),
                ),
                (
                    "sale_value",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Total sale value of the contract",
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                        verbose_name="Sale Value",
                    ),
                ),
                (
                    "project_value",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Real cost of the project",
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Project Value",
                    ),
                ),
                (
                    "roi",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Return on Investment percentage",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="ROI (%)",
                    ),
                ),
                (
                    "completion_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Percentage of completion of the project",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("100.00")),
                        ],
                        verbose_name="Completion Percentage (%)",
                    ),
                ),
                (
                    "observations",
                    models.TextField(
                        blank=True,
                        help_text="Additional information about the project",
                        verbose_name="Observations",
                    ),
                ),
                (
                    "expected_delivery_date",
                    models.DateField(
                        default=projects.models.project.Project.get_default_delivery_date,
                        help_text="Expected date for project delivery",
                        verbose_name="Expected Delivery Date",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="created at",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Last Updated"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this project",
                        on_delete=django.db.models.deletion.RESTRICT,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "incorporation",
                    models.ForeignKey(
                        help_text="Incorporação ao qual este projeto pertence",
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="projects",
                        to="projects.incorporation",
                        verbose_name="Incorporação",
                    ),
                ),
                (
                    "model_project",
                    models.ForeignKey(
                        help_text="Modelo/template utilizado para este projeto",
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="projects",
                        to="projects.modelproject",
                        verbose_name="Modelo de Projeto",
                    ),
                ),
                (
                    "production_cell",
                    models.ForeignKey(
                        blank=True,
                        help_text="Production cell responsible for this project",
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="projects",
                        to="projects.productioncell",
                        verbose_name="Production Cell",
                    ),
                ),
                (
                    "status_project",
                    models.ForeignKey(
                        help_text="Status atual do projeto",
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="projects.projectstatus",
                        verbose_name="Status of the Project",
                    ),
                ),
            ],
            options={
                "ordering": ["incorporation"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalContact",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "contact_role",
                    models.CharField(
                        choices=[
                            ("PRIMARY", "Primary Contact"),
                            ("TECHNICAL", "Technical Contact"),
                            ("FINANCIAL", "Financial Contact"),
                            ("LEGAL", "Legal Representative"),
                            ("PROJECT_MANAGER", "Project Manager"),
                            ("SUPERVISOR", "Supervisor"),
                        ],
                        default="PRIMARY",
                        max_length=100,
                        verbose_name="Contact Role",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Is Active"),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        blank=True,
                        editable=False,
                        help_text="Created at",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="Last Updated"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "contact",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Person who will monitor this project",
                        limit_choices_to=models.Q(
                            ("tipo_usuario__code", "CLIENT"), ("is_active", True)
                        ),
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Contact Person",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="User who created this contact",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Owner who assigned this contact",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="projects.contractowner",
                        verbose_name="Contract Owner",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="projects.project",
                        verbose_name="Project",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Project Contact",
                "verbose_name_plural": "historical Project Contacts",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="ContractProject",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "preco_venda_unidade",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Preço específico desta unidade neste contrato",
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                        verbose_name="Preço de Venda da Unidade",
                    ),
                ),
                (
                    "desconto_aplicado",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Valor do desconto aplicado nesta unidade",
                        max_digits=8,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Desconto Aplicado (R$)",
                    ),
                ),
                (
                    "percentual_desconto",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Percentual de desconto aplicado",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MinValueValidator(Decimal("100.00")),
                        ],
                        verbose_name="Percentual de Desconto (%)",
                    ),
                ),
                (
                    "observacoes_especificas",
                    models.TextField(
                        blank=True,
                        help_text="Observações específicas desta venda (customizações, condições especiais, etc.)",
                        verbose_name="Observações Específicas",
                    ),
                ),
                (
                    "condicoes_especiais",
                    models.TextField(
                        blank=True,
                        help_text="Condições especiais acordadas para esta unidade",
                        verbose_name="Condições Especiais",
                    ),
                ),
                (
                    "data_vinculacao",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Data em que o projeto foi vinculado ao contrato",
                        verbose_name="Data de Vinculação",
                    ),
                ),
                (
                    "data_reserva",
                    models.DateTimeField(
                        blank=True,
                        help_text="Data em que a unidade foi reservada",
                        null=True,
                        verbose_name="Data de Reserva",
                    ),
                ),
                (
                    "data_venda_confirmada",
                    models.DateTimeField(
                        blank=True,
                        help_text="Data em que a venda foi confirmada",
                        null=True,
                        verbose_name="Data de Venda Confirmada",
                    ),
                ),
                (
                    "data_atualizacao",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Última Atualização"
                    ),
                ),
                (
                    "contract",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contract_projects",
                        to="projects.contract",
                        verbose_name="Contract",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="project_contracts",
                        to="projects.project",
                        verbose_name="Project",
                    ),
                ),
            ],
            options={
                "verbose_name": "Contract-Project",
                "verbose_name_plural": "Contracts-Projects",
                "ordering": ["contract", "project__model_project__code"],
            },
        ),
        migrations.CreateModel(
            name="Contact",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "contact_role",
                    models.CharField(
                        choices=[
                            ("PRIMARY", "Primary Contact"),
                            ("TECHNICAL", "Technical Contact"),
                            ("FINANCIAL", "Financial Contact"),
                            ("LEGAL", "Legal Representative"),
                            ("PROJECT_MANAGER", "Project Manager"),
                            ("SUPERVISOR", "Supervisor"),
                        ],
                        default="PRIMARY",
                        max_length=100,
                        verbose_name="Contact Role",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Is Active"),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Created at",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Last Updated"),
                ),
                (
                    "contact",
                    models.ForeignKey(
                        help_text="Person who will monitor this project",
                        limit_choices_to=models.Q(
                            ("tipo_usuario__code", "CLIENT"), ("is_active", True)
                        ),
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="monitored_projects",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Contact Person",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this contact",
                        on_delete=django.db.models.deletion.RESTRICT,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        help_text="Owner who assigned this contact",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assigned_contacts",
                        to="projects.contractowner",
                        verbose_name="Contract Owner",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="project_contacts",
                        to="projects.project",
                        verbose_name="Project",
                    ),
                ),
            ],
            options={
                "verbose_name": "Project Contact",
                "verbose_name_plural": "Project Contacts",
            },
        ),
        migrations.CreateModel(
            name="HistoricalProject",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "project_name",
                    models.CharField(
                        help_text="Descriptive name of the project",
                        max_length=200,
                        verbose_name="Project Name",
                    ),
                ),
                (
                    "address",
                    models.TextField(
                        help_text="address of the project", verbose_name="address"
                    ),
                ),
                (
                    "area_total",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.01"),
                        help_text="Área total do lote/terreno/unidade",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                        verbose_name="Área Total (m²)",
                    ),
                ),
                (
                    "construction_cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Real construction cost of the project",
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Construction Cost",
                    ),
                ),
                (
                    "sale_value",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Total sale value of the contract",
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                        verbose_name="Sale Value",
                    ),
                ),
                (
                    "project_value",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Real cost of the project",
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Project Value",
                    ),
                ),
                (
                    "roi",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Return on Investment percentage",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="ROI (%)",
                    ),
                ),
                (
                    "completion_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Percentage of completion of the project",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("100.00")),
                        ],
                        verbose_name="Completion Percentage (%)",
                    ),
                ),
                (
                    "observations",
                    models.TextField(
                        blank=True,
                        help_text="Additional information about the project",
                        verbose_name="Observations",
                    ),
                ),
                (
                    "expected_delivery_date",
                    models.DateField(
                        default=projects.models.project.Project.get_default_delivery_date,
                        help_text="Expected date for project delivery",
                        verbose_name="Expected Delivery Date",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        blank=True,
                        editable=False,
                        help_text="created at",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="Last Updated"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="User who created this project",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "incorporation",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Incorporação ao qual este projeto pertence",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="projects.incorporation",
                        verbose_name="Incorporação",
                    ),
                ),
                (
                    "model_project",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Modelo/template utilizado para este projeto",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="projects.modelproject",
                        verbose_name="Modelo de Projeto",
                    ),
                ),
                (
                    "production_cell",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Production cell responsible for this project",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="projects.productioncell",
                        verbose_name="Production Cell",
                    ),
                ),
                (
                    "status_project",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Status atual do projeto",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="projects.projectstatus",
                        verbose_name="Status of the Project",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical project",
                "verbose_name_plural": "historical projects",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalModelProject",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Ex: Casa Tipo A, Townhouse Padrão, Terreno Comercial",
                        max_length=200,
                        verbose_name="Name of the Model",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        db_index=True,
                        help_text="Unique code for identification , like M1, C2, T3",
                        max_length=50,
                        verbose_name="Code of the Model",
                    ),
                ),
                (
                    "builders_fee",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Fee charged by the builder for this model",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(
                                Decimal("10000.00")
                            )
                        ],
                        verbose_name="Fee for Builders",
                    ),
                ),
                (
                    "area_padrao",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Área padrão para este tipo de projeto",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                        verbose_name="Área Padrão (m²)",
                    ),
                ),
                (
                    "area_construida_padrao",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Área construída padrão (0 para terrenos)",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Área Construída Padrão (m²)",
                    ),
                ),
                (
                    "especificacoes_padrao",
                    models.TextField(
                        blank=True,
                        help_text="Especificações técnicas padrão para este modelo",
                        verbose_name="Especificações Padrão",
                    ),
                ),
                (
                    "materiais_padrao",
                    models.TextField(
                        blank=True,
                        help_text="Lista de materiais típicos para este modelo",
                        verbose_name="Materiais Padrão",
                    ),
                ),
                (
                    "custo_base_estimado",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Custo base estimado para este modelo",
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Custo Base Estimado",
                    ),
                ),
                (
                    "custo_por_m2",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Custo estimado por metro quadrado",
                        max_digits=8,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Custo por m² (R$/m²)",
                    ),
                ),
                (
                    "duracao_construcao_dias",
                    models.IntegerField(
                        help_text="Duração estimada da construção em dias",
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="Duração Estimada (dias)",
                    ),
                ),
                (
                    "requisitos_especiais",
                    models.TextField(
                        blank=True,
                        help_text="Requisitos especiais para este tipo de projeto",
                        verbose_name="Requisitos Especiais",
                    ),
                ),
                (
                    "regulamentacoes_county",
                    models.TextField(
                        blank=True,
                        help_text="Regulamentações específicas do county para este modelo",
                        verbose_name="Regulamentações do County",
                    ),
                ),
                (
                    "versao",
                    models.CharField(
                        default="1.0",
                        help_text="Versão do modelo (ex: 1.0, 1.1, 2.0)",
                        max_length=10,
                        verbose_name="Versão",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Se este modelo está ativo para uso",
                        verbose_name="Is Active",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="Created At"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="Last Updated"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "county",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="County onde este modelo é aplicável",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.county",
                        verbose_name="County/Condado",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created by",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project_type",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="projects.projecttype",
                        verbose_name="Tipo Base do Projeto",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Model of Project",
                "verbose_name_plural": "historical Models of Projects",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalContract",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "contract_number",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Número único do contrato (gerado automaticamente se vazio)",
                        max_length=50,
                        verbose_name="Número do Contrato",
                    ),
                ),
                (
                    "contract_value",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Total value of all units in the contract",
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                        verbose_name="Contract Value",
                    ),
                ),
                (
                    "management_company",
                    models.CharField(
                        choices=[("L. Lira", "L. Lira"), ("H & S", "H & S")],
                        default="L. Lira",
                        help_text="Type of management for this contract",
                        max_length=50,
                        verbose_name="Type of Management",
                    ),
                ),
                (
                    "sign_date",
                    models.DateField(
                        help_text="Signature date of the contract (when it was signed)",
                        verbose_name="Signature Date",
                    ),
                ),
                (
                    "payment_date",
                    models.DateField(
                        help_text="Payment date of the contract",
                        verbose_name="Payment Date",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        blank=True,
                        editable=False,
                        help_text="Created date of the contract",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        blank=True,
                        editable=False,
                        help_text="Date of the last update",
                        verbose_name="Last Updated",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="User who created this contract",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "lead",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Lead que originou este contrato",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="leads.lead",
                        verbose_name="Lead Origem",
                    ),
                ),
                (
                    "incorporation",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Incorporation associated with this contract",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="projects.incorporation",
                        verbose_name="Incorporation",
                    ),
                ),
                (
                    "payment_method",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="projects.paymentmethod",
                        verbose_name="Forma de Pagamento",
                    ),
                ),
                (
                    "status_contract",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="projects.statuscontract",
                        verbose_name="Status do Contrato",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Contract",
                "verbose_name_plural": "historical Contracts",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name="contract",
            name="status_contract",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="contracts",
                to="projects.statuscontract",
                verbose_name="Status do Contrato",
            ),
        ),
        migrations.AddIndex(
            model_name="incorporation",
            index=models.Index(
                fields=["incorporation_type"], name="projects_in_incorpo_35faf1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="incorporation",
            index=models.Index(
                fields=["incorporation_status"], name="projects_in_incorpo_a0bb5c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="incorporation",
            index=models.Index(
                fields=["county"], name="projects_in_county__fd2ca7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="incorporation",
            index=models.Index(
                fields=["launch_date"], name="projects_in_launch__d4685c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="contractowner",
            index=models.Index(
                fields=["contract"], name="projects_co_contrac_b5db55_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="contractowner",
            index=models.Index(
                fields=["client"], name="projects_co_client__4973df_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="contractowner",
            index=models.Index(
                fields=["owner_type"], name="projects_co_owner_t_3863e3_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="contractowner",
            unique_together={("contract", "client")},
        ),
        migrations.AddIndex(
            model_name="contractproject",
            index=models.Index(
                fields=["contract"], name="projects_co_contrac_f9baf3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="contractproject",
            index=models.Index(
                fields=["project"], name="projects_co_project_942346_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="contractproject",
            index=models.Index(
                fields=["data_vinculacao"], name="projects_co_data_vi_0d88a6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="contractproject",
            index=models.Index(
                fields=["preco_venda_unidade"], name="projects_co_preco_v_9ca645_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="contractproject",
            unique_together={("contract", "project")},
        ),
        migrations.AddIndex(
            model_name="contact",
            index=models.Index(
                fields=["contact"], name="projects_co_contact_662d21_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="contact",
            index=models.Index(
                fields=["project"], name="projects_co_project_ea5ed4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="contact",
            index=models.Index(fields=["owner"], name="projects_co_owner_i_df7534_idx"),
        ),
        migrations.AddIndex(
            model_name="contact",
            index=models.Index(
                fields=["is_active"], name="projects_co_is_acti_2edbfa_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="contact",
            unique_together={("contact", "project", "contact_role")},
        ),
        migrations.AddIndex(
            model_name="modelproject",
            index=models.Index(fields=["code"], name="projects_mo_code_366cf2_idx"),
        ),
        migrations.AddIndex(
            model_name="modelproject",
            index=models.Index(
                fields=["project_type"], name="projects_mo_project_34089f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="modelproject",
            index=models.Index(
                fields=["county"], name="projects_mo_county__ff0283_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="modelproject",
            index=models.Index(
                fields=["is_active"], name="projects_mo_is_acti_80ed4f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="contract",
            index=models.Index(
                fields=["contract_number"], name="projects_co_contrac_64822b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="contract",
            index=models.Index(
                fields=["status_contract"], name="projects_co_status__35db18_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="contract",
            index=models.Index(
                fields=["sign_date"], name="projects_co_sign_da_392836_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="contract",
            index=models.Index(
                fields=["incorporation"], name="projects_co_incorpo_04807f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="contract",
            index=models.Index(fields=["lead"], name="projects_co_lead_id_cff5d0_idx"),
        ),
    ]

# Generated by Django 5.1.4 on 2025-07-15 03:25

import django.core.validators
import django.db.models.deletion
import simple_history.models
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("projects", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="CostGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the cost group",
                        max_length=100,
                        verbose_name="Name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of the cost group",
                        verbose_name="Description",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Is Active"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Last Updated"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_cost_groups",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
            ],
            options={
                "verbose_name": "Cost Group",
                "verbose_name_plural": "Cost Groups",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="CostSubGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the cost subgroup",
                        max_length=100,
                        verbose_name="Name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of the cost subgroup",
                        verbose_name="Description",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Is Active"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Last Updated"),
                ),
                (
                    "cost_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subgroups",
                        to="projects.costgroup",
                        verbose_name="Cost Group",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_cost_subgroups",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
            ],
            options={
                "verbose_name": "Cost SubGroup",
                "verbose_name_plural": "Cost SubGroups",
                "ordering": ["cost_group", "name"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalCostGroup",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the cost group",
                        max_length=100,
                        verbose_name="Name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of the cost group",
                        verbose_name="Description",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Is Active"),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="Created At"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="Last Updated"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Cost Group",
                "verbose_name_plural": "historical Cost Groups",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalCostSubGroup",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the cost subgroup",
                        max_length=100,
                        verbose_name="Name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of the cost subgroup",
                        verbose_name="Description",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Is Active"),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="Created At"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="Last Updated"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "cost_group",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="projects.costgroup",
                        verbose_name="Cost Group",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Cost SubGroup",
                "verbose_name_plural": "historical Cost SubGroups",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalModelPhase",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "phase_name",
                    models.CharField(
                        help_text="Ex: Site Preparation, Foundation, Framing",
                        max_length=200,
                        verbose_name="Phase Name",
                    ),
                ),
                (
                    "phase_code",
                    models.CharField(
                        help_text="Unique code for identification (ex: PREP, FOUND, FRAME)",
                        max_length=20,
                        verbose_name="Phase Code",
                    ),
                ),
                (
                    "phase_description",
                    models.TextField(
                        help_text="Detailed description of what should be done in this phase",
                        verbose_name="Phase Description",
                    ),
                ),
                (
                    "phase_objectives",
                    models.TextField(
                        blank=True,
                        help_text="Main objectives and deliverables of this phase",
                        verbose_name="Phase Objectives",
                    ),
                ),
                (
                    "execution_order",
                    models.IntegerField(
                        help_text="Sequential execution order of this phase",
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="Execution Order",
                    ),
                ),
                (
                    "estimated_duration_days",
                    models.IntegerField(
                        help_text="Estimated duration of this phase in days",
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="Estimated Duration (days)",
                    ),
                ),
                (
                    "is_mandatory",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this phase is mandatory for the project",
                        verbose_name="Is Mandatory",
                    ),
                ),
                (
                    "allows_parallel",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this phase can be executed in parallel with others",
                        verbose_name="Allows Parallel Execution",
                    ),
                ),
                (
                    "requires_inspection",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this phase requires official inspection",
                        verbose_name="Requires Inspection",
                    ),
                ),
                (
                    "initial_requirements",
                    models.TextField(
                        blank=True,
                        help_text="Requirements that must be met before starting this phase",
                        verbose_name="Initial Requirements",
                    ),
                ),
                (
                    "completion_criteria",
                    models.TextField(
                        blank=True,
                        help_text="Criteria to consider the phase completed",
                        verbose_name="Completion Criteria",
                    ),
                ),
                (
                    "deliverables",
                    models.TextField(
                        blank=True,
                        help_text="List of deliverables from this phase",
                        verbose_name="Deliverables",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this phase is active in the model",
                        verbose_name="Is Active",
                    ),
                ),
                (
                    "version",
                    models.CharField(
                        default="1.0", max_length=10, verbose_name="Version"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="Created At"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="Last Updated"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project_model",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="projects.modelproject",
                        verbose_name="Project Model",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Model Phase",
                "verbose_name_plural": "historical Model Phases",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="ModelPhase",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "phase_name",
                    models.CharField(
                        help_text="Ex: Site Preparation, Foundation, Framing",
                        max_length=200,
                        verbose_name="Phase Name",
                    ),
                ),
                (
                    "phase_code",
                    models.CharField(
                        help_text="Unique code for identification (ex: PREP, FOUND, FRAME)",
                        max_length=20,
                        verbose_name="Phase Code",
                    ),
                ),
                (
                    "phase_description",
                    models.TextField(
                        help_text="Detailed description of what should be done in this phase",
                        verbose_name="Phase Description",
                    ),
                ),
                (
                    "phase_objectives",
                    models.TextField(
                        blank=True,
                        help_text="Main objectives and deliverables of this phase",
                        verbose_name="Phase Objectives",
                    ),
                ),
                (
                    "execution_order",
                    models.IntegerField(
                        help_text="Sequential execution order of this phase",
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="Execution Order",
                    ),
                ),
                (
                    "estimated_duration_days",
                    models.IntegerField(
                        help_text="Estimated duration of this phase in days",
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="Estimated Duration (days)",
                    ),
                ),
                (
                    "is_mandatory",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this phase is mandatory for the project",
                        verbose_name="Is Mandatory",
                    ),
                ),
                (
                    "allows_parallel",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this phase can be executed in parallel with others",
                        verbose_name="Allows Parallel Execution",
                    ),
                ),
                (
                    "requires_inspection",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this phase requires official inspection",
                        verbose_name="Requires Inspection",
                    ),
                ),
                (
                    "initial_requirements",
                    models.TextField(
                        blank=True,
                        help_text="Requirements that must be met before starting this phase",
                        verbose_name="Initial Requirements",
                    ),
                ),
                (
                    "completion_criteria",
                    models.TextField(
                        blank=True,
                        help_text="Criteria to consider the phase completed",
                        verbose_name="Completion Criteria",
                    ),
                ),
                (
                    "deliverables",
                    models.TextField(
                        blank=True,
                        help_text="List of deliverables from this phase",
                        verbose_name="Deliverables",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this phase is active in the model",
                        verbose_name="Is Active",
                    ),
                ),
                (
                    "version",
                    models.CharField(
                        default="1.0", max_length=10, verbose_name="Version"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Last Updated"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_model_phases",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "prerequisite_phases",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Phases that must be completed before this one",
                        related_name="dependent_phases",
                        to="projects.modelphase",
                        verbose_name="Prerequisite Phases",
                    ),
                ),
                (
                    "project_model",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="phases",
                        to="projects.modelproject",
                        verbose_name="Project Model",
                    ),
                ),
            ],
            options={
                "verbose_name": "Model Phase",
                "verbose_name_plural": "Model Phases",
                "ordering": ["project_model", "execution_order"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalPhaseProject",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "phase_name",
                    models.CharField(
                        help_text="Specific name for this phase in the project",
                        max_length=200,
                        verbose_name="Phase Name",
                    ),
                ),
                (
                    "phase_code",
                    models.CharField(max_length=20, verbose_name="Phase Code"),
                ),
                (
                    "phase_status",
                    models.CharField(
                        choices=[
                            ("NOT_STARTED", "Not Started"),
                            ("WAITING_PREREQUISITES", "Waiting Prerequisites"),
                            ("READY_TO_START", "Ready to Start"),
                            ("IN_PROGRESS", "In Progress"),
                            ("PAUSED", "Paused"),
                            ("WAITING_INSPECTION", "Waiting Inspection"),
                            ("INSPECTION_FAILED", "Inspection Failed"),
                            ("COMPLETED", "Completed"),
                            ("BLOCKED", "Blocked"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="NOT_STARTED",
                        max_length=25,
                        verbose_name="Phase Status",
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("LOW", "Low"),
                            ("NORMAL", "Normal"),
                            ("HIGH", "High"),
                            ("CRITICAL", "Critical"),
                        ],
                        default="NORMAL",
                        max_length=10,
                        verbose_name="Priority",
                    ),
                ),
                (
                    "planned_start_date",
                    models.DateField(
                        blank=True,
                        help_text="Planned date to start the phase",
                        null=True,
                        verbose_name="Planned Start Date",
                    ),
                ),
                (
                    "planned_end_date",
                    models.DateField(
                        blank=True,
                        help_text="Planned date to finish the phase",
                        null=True,
                        verbose_name="Planned End Date",
                    ),
                ),
                (
                    "actual_start_date",
                    models.DateField(
                        blank=True,
                        help_text="Actual date when phase started",
                        null=True,
                        verbose_name="Actual Start Date",
                    ),
                ),
                (
                    "actual_end_date",
                    models.DateField(
                        blank=True,
                        help_text="Actual date when phase finished",
                        null=True,
                        verbose_name="Actual End Date",
                    ),
                ),
                (
                    "execution_order",
                    models.IntegerField(
                        help_text="Execution order in this specific project",
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="Execution Order",
                    ),
                ),
                (
                    "completion_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("100.00")),
                        ],
                        verbose_name="Completion Percentage (%)",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Specific notes for this phase in the project",
                        verbose_name="Notes",
                    ),
                ),
                (
                    "issues_found",
                    models.TextField(
                        blank=True,
                        help_text="Specific issues found during execution",
                        verbose_name="Issues Found",
                    ),
                ),
                (
                    "solutions_applied",
                    models.TextField(
                        blank=True,
                        help_text="Solutions applied to resolve issues",
                        verbose_name="Solutions Applied",
                    ),
                ),
                (
                    "estimated_cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Estimated cost for this phase",
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Estimated Cost",
                    ),
                ),
                (
                    "actual_cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Actual cost spent on this phase",
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Actual Cost",
                    ),
                ),
                (
                    "requires_inspection",
                    models.BooleanField(
                        default=False, verbose_name="Requires Inspection"
                    ),
                ),
                (
                    "inspection_scheduled_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Inspection Scheduled Date"
                    ),
                ),
                (
                    "inspection_completed_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Inspection Completed Date"
                    ),
                ),
                (
                    "inspection_result",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("PENDING", "Pending"),
                            ("APPROVED", "Approved"),
                            ("REJECTED", "Rejected"),
                            ("APPROVED_WITH_CONDITIONS", "Approved with Conditions"),
                        ],
                        max_length=25,
                        verbose_name="Inspection Result",
                    ),
                ),
                (
                    "inspection_notes",
                    models.TextField(blank=True, verbose_name="Inspection Notes"),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="Created At"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="Last Updated"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="projects.project",
                        verbose_name="Project",
                    ),
                ),
                (
                    "supervisor",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Supervisor",
                    ),
                ),
                (
                    "technical_responsible",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Technical Responsible",
                    ),
                ),
                (
                    "model_phase",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Template base for this phase",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="projects.modelphase",
                        verbose_name="Model Phase",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Phase Project",
                "verbose_name_plural": "historical Phase Projects",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalModelTask",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "task_name",
                    models.CharField(
                        help_text="Descriptive name of the task",
                        max_length=200,
                        verbose_name="Task Name",
                    ),
                ),
                (
                    "task_code",
                    models.CharField(
                        help_text="Unique code for identification",
                        max_length=20,
                        verbose_name="Task Code",
                    ),
                ),
                (
                    "task_type",
                    models.CharField(
                        choices=[
                            ("PREPARATION", "Preparation"),
                            ("MATERIAL", "Material/Supplies"),
                            ("INTERNAL_SERVICE", "Internal Service"),
                            ("SUBCONTRACTED", "Subcontracted Service"),
                            ("INSPECTION", "Inspection"),
                            ("DOCUMENTATION", "Documentation"),
                            ("ADMINISTRATIVE", "Administrative"),
                            ("CLEANUP", "Cleanup/Organization"),
                            ("QUALITY_CONTROL", "Quality Control"),
                        ],
                        max_length=20,
                        verbose_name="Task Type",
                    ),
                ),
                (
                    "detailed_description",
                    models.TextField(
                        help_text="Complete description of how to execute the task",
                        verbose_name="Detailed Description",
                    ),
                ),
                (
                    "task_objective",
                    models.TextField(
                        blank=True,
                        help_text="What should be achieved with this task",
                        verbose_name="Task Objective",
                    ),
                ),
                (
                    "estimated_duration_hours",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Estimated time for execution in hours",
                        max_digits=6,
                        validators=[django.core.validators.MinValueValidator(0.1)],
                        verbose_name="Estimated Duration (hours)",
                    ),
                ),
                (
                    "execution_order",
                    models.IntegerField(
                        help_text="Execution order within the phase",
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="Execution Order",
                    ),
                ),
                (
                    "is_mandatory",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this task is mandatory for the phase",
                        verbose_name="Is Mandatory",
                    ),
                ),
                (
                    "allows_parallel",
                    models.BooleanField(
                        default=True,
                        help_text="Whether it can be executed in parallel with other tasks",
                        verbose_name="Allows Parallel Execution",
                    ),
                ),
                (
                    "requires_specialization",
                    models.BooleanField(
                        default=False,
                        help_text="Whether it requires specialized labor",
                        verbose_name="Requires Specialization",
                    ),
                ),
                (
                    "skill_category",
                    models.CharField(
                        choices=[
                            ("BASIC", "Basic"),
                            ("SPECIALIZED", "Specialized"),
                            ("TECHNICAL", "Technical"),
                            ("MANAGERIAL", "Managerial"),
                        ],
                        default="BASIC",
                        max_length=15,
                        verbose_name="Required Skill Category",
                    ),
                ),
                (
                    "required_people",
                    models.IntegerField(
                        default=1,
                        help_text="Number of people needed to execute",
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="Required People",
                    ),
                ),
                (
                    "required_skills",
                    models.TextField(
                        blank=True,
                        help_text="Description of specific skills needed",
                        verbose_name="Required Skills",
                    ),
                ),
                (
                    "special_requirements",
                    models.TextField(
                        blank=True,
                        help_text="Special requirements for executing this task",
                        verbose_name="Special Requirements",
                    ),
                ),
                (
                    "execution_conditions",
                    models.TextField(
                        blank=True,
                        help_text="Required conditions for execution (weather, time, etc.)",
                        verbose_name="Execution Conditions",
                    ),
                ),
                (
                    "required_equipment",
                    models.TextField(
                        blank=True,
                        help_text="List of required equipment",
                        verbose_name="Required Equipment",
                    ),
                ),
                (
                    "acceptance_criteria",
                    models.TextField(
                        blank=True,
                        help_text="Criteria to consider the task completed",
                        verbose_name="Acceptance Criteria",
                    ),
                ),
                (
                    "checkpoints",
                    models.TextField(
                        blank=True,
                        help_text="Points to verify during/after execution",
                        verbose_name="Quality Checkpoints",
                    ),
                ),
                (
                    "identified_risks",
                    models.TextField(
                        blank=True,
                        help_text="Main risks associated with this task",
                        verbose_name="Identified Risks",
                    ),
                ),
                (
                    "safety_measures",
                    models.TextField(
                        blank=True,
                        help_text="Safety measures to be observed",
                        verbose_name="Safety Measures",
                    ),
                ),
                (
                    "required_ppe",
                    models.TextField(
                        blank=True,
                        help_text="Required personal protective equipment",
                        verbose_name="Required PPE",
                    ),
                ),
                (
                    "estimated_labor_cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Estimated labor cost for this task",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Estimated Labor Cost",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this task is active in the model",
                        verbose_name="Is Active",
                    ),
                ),
                (
                    "version",
                    models.CharField(
                        default="1.0", max_length=10, verbose_name="Version"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="Created At"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="Last Updated"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "cost_subgroup",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Cost subgroup for this task",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="projects.costsubgroup",
                        verbose_name="Cost SubGroup",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "model_phase",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="projects.modelphase",
                        verbose_name="Model Phase",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Model Task",
                "verbose_name_plural": "historical Model Tasks",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="ModelTask",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "task_name",
                    models.CharField(
                        help_text="Descriptive name of the task",
                        max_length=200,
                        verbose_name="Task Name",
                    ),
                ),
                (
                    "task_code",
                    models.CharField(
                        help_text="Unique code for identification",
                        max_length=20,
                        verbose_name="Task Code",
                    ),
                ),
                (
                    "task_type",
                    models.CharField(
                        choices=[
                            ("PREPARATION", "Preparation"),
                            ("MATERIAL", "Material/Supplies"),
                            ("INTERNAL_SERVICE", "Internal Service"),
                            ("SUBCONTRACTED", "Subcontracted Service"),
                            ("INSPECTION", "Inspection"),
                            ("DOCUMENTATION", "Documentation"),
                            ("ADMINISTRATIVE", "Administrative"),
                            ("CLEANUP", "Cleanup/Organization"),
                            ("QUALITY_CONTROL", "Quality Control"),
                        ],
                        max_length=20,
                        verbose_name="Task Type",
                    ),
                ),
                (
                    "detailed_description",
                    models.TextField(
                        help_text="Complete description of how to execute the task",
                        verbose_name="Detailed Description",
                    ),
                ),
                (
                    "task_objective",
                    models.TextField(
                        blank=True,
                        help_text="What should be achieved with this task",
                        verbose_name="Task Objective",
                    ),
                ),
                (
                    "estimated_duration_hours",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Estimated time for execution in hours",
                        max_digits=6,
                        validators=[django.core.validators.MinValueValidator(0.1)],
                        verbose_name="Estimated Duration (hours)",
                    ),
                ),
                (
                    "execution_order",
                    models.IntegerField(
                        help_text="Execution order within the phase",
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="Execution Order",
                    ),
                ),
                (
                    "is_mandatory",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this task is mandatory for the phase",
                        verbose_name="Is Mandatory",
                    ),
                ),
                (
                    "allows_parallel",
                    models.BooleanField(
                        default=True,
                        help_text="Whether it can be executed in parallel with other tasks",
                        verbose_name="Allows Parallel Execution",
                    ),
                ),
                (
                    "requires_specialization",
                    models.BooleanField(
                        default=False,
                        help_text="Whether it requires specialized labor",
                        verbose_name="Requires Specialization",
                    ),
                ),
                (
                    "skill_category",
                    models.CharField(
                        choices=[
                            ("BASIC", "Basic"),
                            ("SPECIALIZED", "Specialized"),
                            ("TECHNICAL", "Technical"),
                            ("MANAGERIAL", "Managerial"),
                        ],
                        default="BASIC",
                        max_length=15,
                        verbose_name="Required Skill Category",
                    ),
                ),
                (
                    "required_people",
                    models.IntegerField(
                        default=1,
                        help_text="Number of people needed to execute",
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="Required People",
                    ),
                ),
                (
                    "required_skills",
                    models.TextField(
                        blank=True,
                        help_text="Description of specific skills needed",
                        verbose_name="Required Skills",
                    ),
                ),
                (
                    "special_requirements",
                    models.TextField(
                        blank=True,
                        help_text="Special requirements for executing this task",
                        verbose_name="Special Requirements",
                    ),
                ),
                (
                    "execution_conditions",
                    models.TextField(
                        blank=True,
                        help_text="Required conditions for execution (weather, time, etc.)",
                        verbose_name="Execution Conditions",
                    ),
                ),
                (
                    "required_equipment",
                    models.TextField(
                        blank=True,
                        help_text="List of required equipment",
                        verbose_name="Required Equipment",
                    ),
                ),
                (
                    "acceptance_criteria",
                    models.TextField(
                        blank=True,
                        help_text="Criteria to consider the task completed",
                        verbose_name="Acceptance Criteria",
                    ),
                ),
                (
                    "checkpoints",
                    models.TextField(
                        blank=True,
                        help_text="Points to verify during/after execution",
                        verbose_name="Quality Checkpoints",
                    ),
                ),
                (
                    "identified_risks",
                    models.TextField(
                        blank=True,
                        help_text="Main risks associated with this task",
                        verbose_name="Identified Risks",
                    ),
                ),
                (
                    "safety_measures",
                    models.TextField(
                        blank=True,
                        help_text="Safety measures to be observed",
                        verbose_name="Safety Measures",
                    ),
                ),
                (
                    "required_ppe",
                    models.TextField(
                        blank=True,
                        help_text="Required personal protective equipment",
                        verbose_name="Required PPE",
                    ),
                ),
                (
                    "estimated_labor_cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Estimated labor cost for this task",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Estimated Labor Cost",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this task is active in the model",
                        verbose_name="Is Active",
                    ),
                ),
                (
                    "version",
                    models.CharField(
                        default="1.0", max_length=10, verbose_name="Version"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Last Updated"),
                ),
                (
                    "cost_subgroup",
                    models.ForeignKey(
                        blank=True,
                        help_text="Cost subgroup for this task",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="tasks",
                        to="projects.costsubgroup",
                        verbose_name="Cost SubGroup",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_model_tasks",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "model_phase",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tasks",
                        to="projects.modelphase",
                        verbose_name="Model Phase",
                    ),
                ),
                (
                    "prerequisite_tasks",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Tasks that must be completed before this one",
                        related_name="dependent_tasks",
                        to="projects.modeltask",
                        verbose_name="Prerequisite Tasks",
                    ),
                ),
            ],
            options={
                "verbose_name": "Model Task",
                "verbose_name_plural": "Model Tasks",
                "ordering": ["model_phase", "execution_order"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalTaskResource",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "resource_name",
                    models.CharField(
                        help_text="Descriptive name of the required resource",
                        max_length=200,
                        verbose_name="Resource Name",
                    ),
                ),
                (
                    "resource_type",
                    models.CharField(
                        choices=[
                            ("MATERIAL", "Material/Supply"),
                            ("EQUIPMENT", "Equipment/Tool"),
                            ("LABOR", "Labor/Human Resource"),
                            ("SERVICE", "Subcontracted Service"),
                            ("OTHER", "Other"),
                        ],
                        max_length=15,
                        verbose_name="Resource Type",
                    ),
                ),
                (
                    "required_quantity",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Amount needed of this resource",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.001"))
                        ],
                        verbose_name="Required Quantity",
                    ),
                ),
                (
                    "unit_measure",
                    models.CharField(
                        default="UN",
                        help_text="Ex: pieces, hours, kg, m2",
                        max_length=20,
                        verbose_name="Unit of Measure",
                    ),
                ),
                (
                    "estimated_unit_cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Estimated cost per unit",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Estimated Unit Cost",
                    ),
                ),
                (
                    "is_mandatory",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this resource is mandatory for the task",
                        verbose_name="Is Mandatory",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Is Active"),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="Created At"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="Last Updated"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "model_task",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="projects.modeltask",
                        verbose_name="Model Task",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Task Resource",
                "verbose_name_plural": "historical Task Resources",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="PhaseProject",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "phase_name",
                    models.CharField(
                        help_text="Specific name for this phase in the project",
                        max_length=200,
                        verbose_name="Phase Name",
                    ),
                ),
                (
                    "phase_code",
                    models.CharField(max_length=20, verbose_name="Phase Code"),
                ),
                (
                    "phase_status",
                    models.CharField(
                        choices=[
                            ("NOT_STARTED", "Not Started"),
                            ("WAITING_PREREQUISITES", "Waiting Prerequisites"),
                            ("READY_TO_START", "Ready to Start"),
                            ("IN_PROGRESS", "In Progress"),
                            ("PAUSED", "Paused"),
                            ("WAITING_INSPECTION", "Waiting Inspection"),
                            ("INSPECTION_FAILED", "Inspection Failed"),
                            ("COMPLETED", "Completed"),
                            ("BLOCKED", "Blocked"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="NOT_STARTED",
                        max_length=25,
                        verbose_name="Phase Status",
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("LOW", "Low"),
                            ("NORMAL", "Normal"),
                            ("HIGH", "High"),
                            ("CRITICAL", "Critical"),
                        ],
                        default="NORMAL",
                        max_length=10,
                        verbose_name="Priority",
                    ),
                ),
                (
                    "planned_start_date",
                    models.DateField(
                        blank=True,
                        help_text="Planned date to start the phase",
                        null=True,
                        verbose_name="Planned Start Date",
                    ),
                ),
                (
                    "planned_end_date",
                    models.DateField(
                        blank=True,
                        help_text="Planned date to finish the phase",
                        null=True,
                        verbose_name="Planned End Date",
                    ),
                ),
                (
                    "actual_start_date",
                    models.DateField(
                        blank=True,
                        help_text="Actual date when phase started",
                        null=True,
                        verbose_name="Actual Start Date",
                    ),
                ),
                (
                    "actual_end_date",
                    models.DateField(
                        blank=True,
                        help_text="Actual date when phase finished",
                        null=True,
                        verbose_name="Actual End Date",
                    ),
                ),
                (
                    "execution_order",
                    models.IntegerField(
                        help_text="Execution order in this specific project",
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="Execution Order",
                    ),
                ),
                (
                    "completion_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("100.00")),
                        ],
                        verbose_name="Completion Percentage (%)",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Specific notes for this phase in the project",
                        verbose_name="Notes",
                    ),
                ),
                (
                    "issues_found",
                    models.TextField(
                        blank=True,
                        help_text="Specific issues found during execution",
                        verbose_name="Issues Found",
                    ),
                ),
                (
                    "solutions_applied",
                    models.TextField(
                        blank=True,
                        help_text="Solutions applied to resolve issues",
                        verbose_name="Solutions Applied",
                    ),
                ),
                (
                    "estimated_cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Estimated cost for this phase",
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Estimated Cost",
                    ),
                ),
                (
                    "actual_cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Actual cost spent on this phase",
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Actual Cost",
                    ),
                ),
                (
                    "requires_inspection",
                    models.BooleanField(
                        default=False, verbose_name="Requires Inspection"
                    ),
                ),
                (
                    "inspection_scheduled_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Inspection Scheduled Date"
                    ),
                ),
                (
                    "inspection_completed_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Inspection Completed Date"
                    ),
                ),
                (
                    "inspection_result",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("PENDING", "Pending"),
                            ("APPROVED", "Approved"),
                            ("REJECTED", "Rejected"),
                            ("APPROVED_WITH_CONDITIONS", "Approved with Conditions"),
                        ],
                        max_length=25,
                        verbose_name="Inspection Result",
                    ),
                ),
                (
                    "inspection_notes",
                    models.TextField(blank=True, verbose_name="Inspection Notes"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Last Updated"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_phase_projects",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "model_phase",
                    models.ForeignKey(
                        help_text="Template base for this phase",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="project_instances",
                        to="projects.modelphase",
                        verbose_name="Model Phase",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="phases",
                        to="projects.project",
                        verbose_name="Project",
                    ),
                ),
                (
                    "supervisor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="phases_supervisor",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Supervisor",
                    ),
                ),
                (
                    "technical_responsible",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="phases_tech_responsible",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Technical Responsible",
                    ),
                ),
            ],
            options={
                "verbose_name": "Phase Project",
                "verbose_name_plural": "Phase Projects",
                "ordering": ["project", "execution_order"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalTaskProject",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "task_name",
                    models.CharField(max_length=200, verbose_name="Task Name"),
                ),
                (
                    "task_code",
                    models.CharField(max_length=20, verbose_name="Task Code"),
                ),
                (
                    "task_description",
                    models.TextField(
                        help_text="Specific description for this task in the project",
                        verbose_name="Task Description",
                    ),
                ),
                (
                    "task_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("WAITING_RESOURCES", "Waiting Resources"),
                            ("WAITING_PREREQUISITES", "Waiting Prerequisites"),
                            ("READY_TO_START", "Ready to Start"),
                            ("IN_PROGRESS", "In Progress"),
                            ("PAUSED", "Paused"),
                            ("WAITING_APPROVAL", "Waiting Approval"),
                            ("REWORK_NEEDED", "Rework Needed"),
                            ("COMPLETED", "Completed"),
                            ("BLOCKED", "Blocked"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="PENDING",
                        max_length=25,
                        verbose_name="Task Status",
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("LOW", "Low"),
                            ("MEDIUM", "Medium"),
                            ("HIGH", "High"),
                            ("CRITICAL", "Critical"),
                            ("URGENT", "Urgent"),
                        ],
                        default="MEDIUM",
                        max_length=10,
                        verbose_name="Priority",
                    ),
                ),
                (
                    "execution_order",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="Execution Order",
                    ),
                ),
                (
                    "planned_start_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Planned Start Date/Time"
                    ),
                ),
                (
                    "planned_end_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Planned End Date/Time"
                    ),
                ),
                (
                    "actual_start_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Actual Start Date/Time"
                    ),
                ),
                (
                    "actual_end_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Actual End Date/Time"
                    ),
                ),
                (
                    "estimated_duration_hours",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=6,
                        validators=[django.core.validators.MinValueValidator(0.1)],
                        verbose_name="Estimated Duration (hours)",
                    ),
                ),
                (
                    "actual_duration_hours",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=6,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Actual Duration (hours)",
                    ),
                ),
                (
                    "completion_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("100.00")),
                        ],
                        verbose_name="Completion Percentage (%)",
                    ),
                ),
                (
                    "quality_rating",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("EXCELLENT", "Excellent"),
                            ("GOOD", "Good"),
                            ("SATISFACTORY", "Satisfactory"),
                            ("UNSATISFACTORY", "Unsatisfactory"),
                            ("REQUIRES_REWORK", "Requires Rework"),
                        ],
                        max_length=15,
                        verbose_name="Quality Rating",
                    ),
                ),
                (
                    "estimated_cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Estimated Cost",
                    ),
                ),
                (
                    "actual_cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Actual Cost",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Specific notes about task execution",
                        verbose_name="Notes",
                    ),
                ),
                (
                    "issues_found",
                    models.TextField(
                        blank=True,
                        help_text="Specific issues found during execution",
                        verbose_name="Issues Found",
                    ),
                ),
                (
                    "solutions_applied",
                    models.TextField(
                        blank=True,
                        help_text="Solutions applied to resolve issues",
                        verbose_name="Solutions Applied",
                    ),
                ),
                (
                    "lessons_learned",
                    models.TextField(
                        blank=True,
                        help_text="Lessons learned during execution",
                        verbose_name="Lessons Learned",
                    ),
                ),
                (
                    "requires_approval",
                    models.BooleanField(
                        default=False, verbose_name="Requires Approval"
                    ),
                ),
                (
                    "approval_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Approval Date"
                    ),
                ),
                (
                    "approval_notes",
                    models.TextField(blank=True, verbose_name="Approval Notes"),
                ),
                (
                    "specific_location",
                    models.CharField(
                        blank=True,
                        help_text="Specific location where task is executed",
                        max_length=200,
                        verbose_name="Specific Location",
                    ),
                ),
                (
                    "weather_conditions",
                    models.CharField(
                        blank=True,
                        help_text="Weather conditions during execution",
                        max_length=100,
                        verbose_name="Weather Conditions",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="Created At"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="Last Updated"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Approved By",
                    ),
                ),
                (
                    "assigned_to",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Assigned To",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "supervisor",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Supervisor",
                    ),
                ),
                (
                    "model_task",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Template base for this task",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="projects.modeltask",
                        verbose_name="Model Task",
                    ),
                ),
                (
                    "phase_project",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="projects.phaseproject",
                        verbose_name="Phase Project",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Task Project",
                "verbose_name_plural": "historical Task Projects",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="TaskProject",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "task_name",
                    models.CharField(max_length=200, verbose_name="Task Name"),
                ),
                (
                    "task_code",
                    models.CharField(max_length=20, verbose_name="Task Code"),
                ),
                (
                    "task_description",
                    models.TextField(
                        help_text="Specific description for this task in the project",
                        verbose_name="Task Description",
                    ),
                ),
                (
                    "task_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("WAITING_RESOURCES", "Waiting Resources"),
                            ("WAITING_PREREQUISITES", "Waiting Prerequisites"),
                            ("READY_TO_START", "Ready to Start"),
                            ("IN_PROGRESS", "In Progress"),
                            ("PAUSED", "Paused"),
                            ("WAITING_APPROVAL", "Waiting Approval"),
                            ("REWORK_NEEDED", "Rework Needed"),
                            ("COMPLETED", "Completed"),
                            ("BLOCKED", "Blocked"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="PENDING",
                        max_length=25,
                        verbose_name="Task Status",
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("LOW", "Low"),
                            ("MEDIUM", "Medium"),
                            ("HIGH", "High"),
                            ("CRITICAL", "Critical"),
                            ("URGENT", "Urgent"),
                        ],
                        default="MEDIUM",
                        max_length=10,
                        verbose_name="Priority",
                    ),
                ),
                (
                    "execution_order",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="Execution Order",
                    ),
                ),
                (
                    "planned_start_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Planned Start Date/Time"
                    ),
                ),
                (
                    "planned_end_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Planned End Date/Time"
                    ),
                ),
                (
                    "actual_start_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Actual Start Date/Time"
                    ),
                ),
                (
                    "actual_end_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Actual End Date/Time"
                    ),
                ),
                (
                    "estimated_duration_hours",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=6,
                        validators=[django.core.validators.MinValueValidator(0.1)],
                        verbose_name="Estimated Duration (hours)",
                    ),
                ),
                (
                    "actual_duration_hours",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=6,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Actual Duration (hours)",
                    ),
                ),
                (
                    "completion_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("100.00")),
                        ],
                        verbose_name="Completion Percentage (%)",
                    ),
                ),
                (
                    "quality_rating",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("EXCELLENT", "Excellent"),
                            ("GOOD", "Good"),
                            ("SATISFACTORY", "Satisfactory"),
                            ("UNSATISFACTORY", "Unsatisfactory"),
                            ("REQUIRES_REWORK", "Requires Rework"),
                        ],
                        max_length=15,
                        verbose_name="Quality Rating",
                    ),
                ),
                (
                    "estimated_cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Estimated Cost",
                    ),
                ),
                (
                    "actual_cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Actual Cost",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Specific notes about task execution",
                        verbose_name="Notes",
                    ),
                ),
                (
                    "issues_found",
                    models.TextField(
                        blank=True,
                        help_text="Specific issues found during execution",
                        verbose_name="Issues Found",
                    ),
                ),
                (
                    "solutions_applied",
                    models.TextField(
                        blank=True,
                        help_text="Solutions applied to resolve issues",
                        verbose_name="Solutions Applied",
                    ),
                ),
                (
                    "lessons_learned",
                    models.TextField(
                        blank=True,
                        help_text="Lessons learned during execution",
                        verbose_name="Lessons Learned",
                    ),
                ),
                (
                    "requires_approval",
                    models.BooleanField(
                        default=False, verbose_name="Requires Approval"
                    ),
                ),
                (
                    "approval_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Approval Date"
                    ),
                ),
                (
                    "approval_notes",
                    models.TextField(blank=True, verbose_name="Approval Notes"),
                ),
                (
                    "specific_location",
                    models.CharField(
                        blank=True,
                        help_text="Specific location where task is executed",
                        max_length=200,
                        verbose_name="Specific Location",
                    ),
                ),
                (
                    "weather_conditions",
                    models.CharField(
                        blank=True,
                        help_text="Weather conditions during execution",
                        max_length=100,
                        verbose_name="Weather Conditions",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Last Updated"),
                ),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_tasks",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Approved By",
                    ),
                ),
                (
                    "assigned_to",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_tasks",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Assigned To",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_task_projects",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "model_task",
                    models.ForeignKey(
                        help_text="Template base for this task",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="project_instances",
                        to="projects.modeltask",
                        verbose_name="Model Task",
                    ),
                ),
                (
                    "phase_project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tasks",
                        to="projects.phaseproject",
                        verbose_name="Phase Project",
                    ),
                ),
                (
                    "supervisor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="supervised_tasks",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Supervisor",
                    ),
                ),
                (
                    "team_members",
                    models.ManyToManyField(
                        blank=True,
                        help_text="People assigned to execute this task",
                        related_name="team_tasks",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Team Members",
                    ),
                ),
            ],
            options={
                "verbose_name": "Task Project",
                "verbose_name_plural": "Task Projects",
                "ordering": ["phase_project", "execution_order"],
            },
        ),
        migrations.CreateModel(
            name="TaskResource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "resource_name",
                    models.CharField(
                        help_text="Descriptive name of the required resource",
                        max_length=200,
                        verbose_name="Resource Name",
                    ),
                ),
                (
                    "resource_type",
                    models.CharField(
                        choices=[
                            ("MATERIAL", "Material/Supply"),
                            ("EQUIPMENT", "Equipment/Tool"),
                            ("LABOR", "Labor/Human Resource"),
                            ("SERVICE", "Subcontracted Service"),
                            ("OTHER", "Other"),
                        ],
                        max_length=15,
                        verbose_name="Resource Type",
                    ),
                ),
                (
                    "required_quantity",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Amount needed of this resource",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.001"))
                        ],
                        verbose_name="Required Quantity",
                    ),
                ),
                (
                    "unit_measure",
                    models.CharField(
                        default="UN",
                        help_text="Ex: pieces, hours, kg, m2",
                        max_length=20,
                        verbose_name="Unit of Measure",
                    ),
                ),
                (
                    "estimated_unit_cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Estimated cost per unit",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Estimated Unit Cost",
                    ),
                ),
                (
                    "is_mandatory",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this resource is mandatory for the task",
                        verbose_name="Is Mandatory",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Is Active"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Last Updated"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_task_resources",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "model_task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="resources",
                        to="projects.modeltask",
                        verbose_name="Model Task",
                    ),
                ),
            ],
            options={
                "verbose_name": "Task Resource",
                "verbose_name_plural": "Task Resources",
                "ordering": ["model_task", "resource_type", "resource_name"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalTaskSpecification",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "usage_description",
                    models.TextField(
                        blank=True,
                        help_text="How the resource was actually used in this task",
                        verbose_name="Usage Description",
                    ),
                ),
                (
                    "planned_quantity",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Originally planned quantity",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.001"))
                        ],
                        verbose_name="Planned Quantity",
                    ),
                ),
                (
                    "actual_quantity_used",
                    models.DecimalField(
                        decimal_places=3,
                        default=Decimal("0.000"),
                        help_text="Quantity actually used",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.000"))
                        ],
                        verbose_name="Actual Quantity Used",
                    ),
                ),
                (
                    "specification_status",
                    models.CharField(
                        choices=[
                            ("PLANNED", "Planned"),
                            ("REQUESTED", "Requested"),
                            ("AVAILABLE", "Available"),
                            ("IN_USE", "In Use"),
                            ("COMPLETED", "Completed"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="PLANNED",
                        max_length=20,
                        verbose_name="Specification Status",
                    ),
                ),
                (
                    "actual_unit_cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Actual cost per unit paid",
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Actual Unit Cost",
                    ),
                ),
                (
                    "actual_total_cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Total cost actually spent",
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Actual Total Cost",
                    ),
                ),
                (
                    "supplier_used",
                    models.CharField(
                        blank=True,
                        help_text="Supplier or vendor used",
                        max_length=200,
                        verbose_name="Supplier Used",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="General notes about resource usage",
                        verbose_name="Notes",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="Created At"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="Last Updated"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "task_project",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="projects.taskproject",
                        verbose_name="Task Project",
                    ),
                ),
                (
                    "task_resource",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Template resource being specified",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="projects.taskresource",
                        verbose_name="Task Resource",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Task Specification",
                "verbose_name_plural": "historical Task Specifications",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="TaskSpecification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "usage_description",
                    models.TextField(
                        blank=True,
                        help_text="How the resource was actually used in this task",
                        verbose_name="Usage Description",
                    ),
                ),
                (
                    "planned_quantity",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Originally planned quantity",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.001"))
                        ],
                        verbose_name="Planned Quantity",
                    ),
                ),
                (
                    "actual_quantity_used",
                    models.DecimalField(
                        decimal_places=3,
                        default=Decimal("0.000"),
                        help_text="Quantity actually used",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.000"))
                        ],
                        verbose_name="Actual Quantity Used",
                    ),
                ),
                (
                    "specification_status",
                    models.CharField(
                        choices=[
                            ("PLANNED", "Planned"),
                            ("REQUESTED", "Requested"),
                            ("AVAILABLE", "Available"),
                            ("IN_USE", "In Use"),
                            ("COMPLETED", "Completed"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="PLANNED",
                        max_length=20,
                        verbose_name="Specification Status",
                    ),
                ),
                (
                    "actual_unit_cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Actual cost per unit paid",
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Actual Unit Cost",
                    ),
                ),
                (
                    "actual_total_cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Total cost actually spent",
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Actual Total Cost",
                    ),
                ),
                (
                    "supplier_used",
                    models.CharField(
                        blank=True,
                        help_text="Supplier or vendor used",
                        max_length=200,
                        verbose_name="Supplier Used",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="General notes about resource usage",
                        verbose_name="Notes",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Last Updated"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_task_specifications",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "task_project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="specifications",
                        to="projects.taskproject",
                        verbose_name="Task Project",
                    ),
                ),
                (
                    "task_resource",
                    models.ForeignKey(
                        help_text="Template resource being specified",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="usage_specifications",
                        to="projects.taskresource",
                        verbose_name="Task Resource",
                    ),
                ),
            ],
            options={
                "verbose_name": "Task Specification",
                "verbose_name_plural": "Task Specifications",
                "ordering": ["task_project", "task_resource"],
            },
        ),
        migrations.AddIndex(
            model_name="costgroup",
            index=models.Index(fields=["name"], name="projects_co_name_6723d9_idx"),
        ),
        migrations.AddIndex(
            model_name="costgroup",
            index=models.Index(
                fields=["is_active"], name="projects_co_is_acti_2f8663_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="costsubgroup",
            index=models.Index(
                fields=["cost_group"], name="projects_co_cost_gr_f96c15_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="costsubgroup",
            index=models.Index(fields=["name"], name="projects_co_name_7543c6_idx"),
        ),
        migrations.AddIndex(
            model_name="costsubgroup",
            index=models.Index(
                fields=["is_active"], name="projects_co_is_acti_c6fd5a_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="costsubgroup",
            unique_together={("cost_group", "name")},
        ),
        migrations.AddIndex(
            model_name="modelphase",
            index=models.Index(
                fields=["project_model"], name="projects_mo_project_6a6f76_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="modelphase",
            index=models.Index(
                fields=["phase_code"], name="projects_mo_phase_c_6dd612_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="modelphase",
            index=models.Index(
                fields=["execution_order"], name="projects_mo_executi_efe49b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="modelphase",
            index=models.Index(
                fields=["is_mandatory"], name="projects_mo_is_mand_7181f0_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="modelphase",
            unique_together={
                ("project_model", "execution_order"),
                ("project_model", "phase_code"),
            },
        ),
        migrations.AddIndex(
            model_name="modeltask",
            index=models.Index(
                fields=["model_phase"], name="projects_mo_model_p_c978a5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="modeltask",
            index=models.Index(
                fields=["task_code"], name="projects_mo_task_co_5049bf_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="modeltask",
            index=models.Index(
                fields=["task_type"], name="projects_mo_task_ty_90c35f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="modeltask",
            index=models.Index(
                fields=["execution_order"], name="projects_mo_executi_690a1c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="modeltask",
            index=models.Index(
                fields=["is_mandatory"], name="projects_mo_is_mand_60c7df_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="modeltask",
            index=models.Index(
                fields=["requires_specialization"],
                name="projects_mo_require_24e115_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="modeltask",
            unique_together={
                ("model_phase", "execution_order"),
                ("model_phase", "task_code"),
            },
        ),
        migrations.AddIndex(
            model_name="phaseproject",
            index=models.Index(
                fields=["project"], name="projects_ph_project_724c9f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="phaseproject",
            index=models.Index(
                fields=["phase_status"], name="projects_ph_phase_s_2950e1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="phaseproject",
            index=models.Index(
                fields=["planned_start_date"], name="projects_ph_planned_87f311_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="phaseproject",
            index=models.Index(
                fields=["planned_end_date"], name="projects_ph_planned_fbb33c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="phaseproject",
            index=models.Index(
                fields=["technical_responsible"], name="projects_ph_technic_929ac4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="phaseproject",
            index=models.Index(
                fields=["priority"], name="projects_ph_priorit_f3d74f_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="phaseproject",
            unique_together={("project", "execution_order"), ("project", "phase_code")},
        ),
        migrations.AddIndex(
            model_name="taskproject",
            index=models.Index(
                fields=["phase_project"], name="projects_ta_phase_p_5d7866_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskproject",
            index=models.Index(
                fields=["task_status"], name="projects_ta_task_st_8a0702_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskproject",
            index=models.Index(
                fields=["priority"], name="projects_ta_priorit_492afa_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskproject",
            index=models.Index(
                fields=["assigned_to"], name="projects_ta_assigne_cd3024_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskproject",
            index=models.Index(
                fields=["planned_start_date"], name="projects_ta_planned_858069_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskproject",
            index=models.Index(
                fields=["planned_end_date"], name="projects_ta_planned_0e8f9b_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="taskproject",
            unique_together={
                ("phase_project", "execution_order"),
                ("phase_project", "task_code"),
            },
        ),
        migrations.AddIndex(
            model_name="taskresource",
            index=models.Index(
                fields=["model_task"], name="projects_ta_model_t_ec5c58_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskresource",
            index=models.Index(
                fields=["resource_type"], name="projects_ta_resourc_4094a0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskresource",
            index=models.Index(
                fields=["is_mandatory"], name="projects_ta_is_mand_6796e6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskspecification",
            index=models.Index(
                fields=["task_project"], name="projects_ta_task_pr_849d6a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskspecification",
            index=models.Index(
                fields=["task_resource"], name="projects_ta_task_re_a6077f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskspecification",
            index=models.Index(
                fields=["specification_status"], name="projects_ta_specifi_00befd_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="taskspecification",
            unique_together={("task_project", "task_resource")},
        ),
    ]

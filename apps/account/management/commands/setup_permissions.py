from django.core.management.base import BaseCommand
from django.contrib.auth.models import Group, Permission
from django.contrib.contenttypes.models import ContentType
from account.models import CustomUser


class Command(BaseCommand):
    help = 'Configurar grupos e permiss√µes padr√£o do sistema'

    def handle(self, *args, **options):
        self.stdout.write('Iniciando configura√ß√£o de grupos e permiss√µes...')
        
        # Definir grupos e suas permiss√µes
        groups_permissions = {
            'Administradores': [
                # Permiss√µes de usu√°rio
                'add_customuser', 'change_customuser', 'delete_customuser', 'view_customuser',
                # Permiss√µes de projetos (quando implementado)
                'add_projeto', 'change_projeto', 'delete_projeto', 'view_projeto',
                # Permiss√µes financeiras (quando implementado)
                'add_orcamento', 'change_orcamento', 'delete_orcamento', 'view_orcamento',
                'add_pagamento', 'change_pagamento', 'delete_pagamento', 'view_pagamento', #orcamento e pagamento sao coisas diferentes me atentar aqui
                # Permiss√µes de compras (quando implementado)
                'add_ordemcompra', 'change_ordemcompra', 'delete_ordemcompra', 'view_ordemcompra',
            ],
            
            'Gerentes': [
                # Usu√°rios (limitado)
                'view_customuser', 'change_customuser',
                # Projetos
                'add_projeto', 'change_projeto', 'view_projeto',
                # Financeiro
                'add_orcamento', 'change_orcamento', 'view_orcamento',
                'view_pagamento', 'add_pagamento',
                # Compras
                'add_ordemcompra', 'change_ordemcompra', 'view_ordemcompra',
            ],
            
            'Operacionais': [
                # Projetos (limitado)
                'view_projeto', 'change_projeto',
                # Tarefas
                'add_tarefa', 'change_tarefa', 'view_tarefa',
                # Atividades
                'add_atividade', 'change_atividade', 'view_atividade',
            ],
            
            'Financeiro': [
                # Visualiza√ß√£o de projetos
                'view_projeto',
                # Controle financeiro completo
                'add_orcamento', 'change_orcamento', 'view_orcamento', 'delete_orcamento',
                'add_pagamento', 'change_pagamento', 'view_pagamento', 'delete_pagamento',
                # Compras (aprova√ß√£o)
                'view_ordemcompra', 'change_ordemcompra',
            ],
            
            'Subcontratados': [
                # Acesso limitado aos pr√≥prios projetos
                'view_projeto',
                # Tarefas pr√≥prias
                'view_tarefa', 'change_tarefa',
                # Atividades pr√≥prias
                'add_atividade', 'view_atividade',
            ],
            
            'Fornecedores': [
                # Visualiza√ß√£o limitada
                'view_ordemcompra',
                # Materiais pr√≥prios
                'view_material', 'change_material',
            ],
            
            'Clientes': [
                # Acesso muito restrito via portal
                'view_projeto',  # Apenas pr√≥prios projetos
            ],
            
            'Funcion√°rios': [
                # Grupo padr√£o para funcion√°rios internos
                'view_projeto',
                'add_atividade', 'view_atividade',
            ]
        }
        
        # Criar grupos e atribuir permiss√µes
        for group_name, permission_codenames in groups_permissions.items():
            group, created = Group.objects.get_or_create(name=group_name)
            
            if created:
                self.stdout.write(f'‚úÖ Grupo "{group_name}" criado')
            else:
                self.stdout.write(f'üìã Grupo "{group_name}" j√° existe')
            
            # Limpar permiss√µes existentes
            group.permissions.clear()
            
            # Adicionar permiss√µes
            permissions_added = 0
            for codename in permission_codenames:
                try:
                    permission = Permission.objects.get(codename=codename)
                    group.permissions.add(permission)
                    permissions_added += 1
                except Permission.DoesNotExist:
                    self.stdout.write(
                        self.style.WARNING(f'‚ö†Ô∏è  Permiss√£o "{codename}" n√£o encontrada')
                    )
            
            self.stdout.write(f'   ‚îî‚îÄ‚îÄ {permissions_added} permiss√µes adicionadas')
        
        # Criar permiss√µes customizadas se necess√°rio
        self.create_custom_permissions()
        
        self.stdout.write(
            self.style.SUCCESS('‚úÖ Configura√ß√£o de grupos e permiss√µes conclu√≠da!')
        )
    
    def create_custom_permissions(self):
        """Criar permiss√µes customizadas espec√≠ficas do sistema"""
        
        # Obter content type do usu√°rio
        user_content_type = ContentType.objects.get_for_model(CustomUser)
        
        custom_permissions = [
            ('can_approve_orders', 'Pode aprovar ordens de compra/servi√ßo'),
            ('can_manage_budgets', 'Pode gerenciar or√ßamentos'),
            ('can_view_financial_reports', 'Pode visualizar relat√≥rios financeiros'),
            ('can_manage_subcontractors', 'Pode gerenciar subcontratados'),
            ('can_access_client_portal', 'Pode acessar portal do cliente'),
            ('can_manage_user_permissions', 'Pode gerenciar permiss√µes de usu√°rios'),
        ]
        
        for codename, name in custom_permissions:
            permission, created = Permission.objects.get_or_create(
                codename=codename,
                name=name,
                content_type=user_content_type,
            )
            
            if created:
                self.stdout.write(f'‚úÖ Permiss√£o customizada "{name}" criada')
        
        # Atribuir permiss√µes customizadas aos grupos
        try:
            # Administradores recebem todas as permiss√µes customizadas
            admin_group = Group.objects.get(name='Administradores')
            for codename, _ in custom_permissions:
                permission = Permission.objects.get(codename=codename)
                admin_group.permissions.add(permission)
            
            # Gerentes recebem algumas permiss√µes espec√≠ficas
            manager_group = Group.objects.get(name='Gerentes')
            manager_permissions = [
                'can_approve_orders', 'can_manage_budgets', 
                'can_view_financial_reports', 'can_manage_subcontractors'
            ]
            for codename in manager_permissions:
                permission = Permission.objects.get(codename=codename)
                manager_group.permissions.add(permission)
                
        except Group.DoesNotExist:
            pass


#TODO: PRECISA CRIAR AS REGRAS DE VERDADE PARA AS PERMISSIONS, LIGAR A PERMISS√ÉO COM A FUNCIONALIDADE OU ROTA DA API.
# AQUI TUDO √â HARD CODED, PRECISA SER DIN√ÇMICO.
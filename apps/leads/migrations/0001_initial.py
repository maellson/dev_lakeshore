# Generated by Django 5.1.4 on 2025-07-13 21:55

import django.core.validators
import django.db.models.deletion
import phonenumber_field.modelfields
import simple_history.models
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("core", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ElevationChoice",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Unique code for system reference",
                        max_length=50,
                        unique=True,
                        verbose_name="Code",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Display name for users",
                        max_length=100,
                        verbose_name="Name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description",
                        verbose_name="Description",
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        help_text="Icon code or emoji",
                        max_length=50,
                        verbose_name="Icon",
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        blank=True,
                        help_text="Hex color code (#000000)",
                        max_length=7,
                        verbose_name="Color",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Display order (lower first)",
                        verbose_name="Display Order",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this option is active",
                        verbose_name="Is Active",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "locale_code",
                    models.CharField(
                        help_text="Elevtions Codes (A, B, N/A)",
                        max_length=10,
                        unique=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Elevation",
                "verbose_name_plural": "Elevations",
                "db_table": "LeadsElevation",
            },
        ),
        migrations.CreateModel(
            name="Lead",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "client_company_name",
                    models.CharField(
                        help_text="Company name if client is a business",
                        max_length=200,
                        verbose_name="Client Company Name",
                    ),
                ),
                (
                    "client_full_name",
                    models.CharField(
                        help_text="Full name of primary contact",
                        max_length=200,
                        verbose_name="Client Full Name",
                    ),
                ),
                (
                    "client_phone",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True,
                        help_text="Primary phone number",
                        max_length=128,
                        region=None,
                        verbose_name="Client Phone",
                    ),
                ),
                (
                    "client_email",
                    models.EmailField(
                        help_text="Primary email address",
                        max_length=254,
                        verbose_name="Client Email",
                    ),
                ),
                (
                    "note",
                    models.TextField(
                        blank=True,
                        help_text="Optional notes or special instructions",
                        verbose_name="Additional Notes",
                    ),
                ),
                (
                    "is_realtor",
                    models.BooleanField(
                        help_text="Whether there is a realtor involved in this deal",
                        verbose_name="Is Realtor Involved",
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        default="FL",
                        help_text="Property state (default: Florida)",
                        max_length=2,
                        verbose_name="State",
                    ),
                ),
                (
                    "parcel_id",
                    models.CharField(
                        help_text="Property parcel identification number",
                        max_length=50,
                        verbose_name="Parcel ID",
                    ),
                ),
                (
                    "other_model",
                    models.CharField(
                        blank=True,
                        help_text="Custom model name if 'Other' is selected",
                        max_length=100,
                        verbose_name="Other Model Name",
                    ),
                ),
                (
                    "has_hoa",
                    models.BooleanField(
                        help_text="Whether property has HOA or association",
                        verbose_name="Has HOA/Association",
                    ),
                ),
                (
                    "contract_value",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Expected contract value in USD",
                        max_digits=15,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("1000.00"))
                        ],
                        verbose_name="Contract Value",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Last Updated"),
                ),
                (
                    "converted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When lead was converted to contract",
                        null=True,
                        verbose_name="Converted At",
                    ),
                ),
            ],
            options={
                "verbose_name": "Lead",
                "verbose_name_plural": "Leads",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="StatusChoice",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Unique code for system reference",
                        max_length=50,
                        unique=True,
                        verbose_name="Code",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Display name for users",
                        max_length=100,
                        verbose_name="Name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description",
                        verbose_name="Description",
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        help_text="Icon code or emoji",
                        max_length=50,
                        verbose_name="Icon",
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        blank=True,
                        help_text="Hex color code (#000000)",
                        max_length=7,
                        verbose_name="Color",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Display order (lower first)",
                        verbose_name="Display Order",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this option is active",
                        verbose_name="Is Active",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Status of Lead",
                "verbose_name_plural": "Status of Leads",
                "db_table": "lead_statusChoice",
            },
        ),
        migrations.CreateModel(
            name="HistoricalLead",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "client_company_name",
                    models.CharField(
                        help_text="Company name if client is a business",
                        max_length=200,
                        verbose_name="Client Company Name",
                    ),
                ),
                (
                    "client_full_name",
                    models.CharField(
                        help_text="Full name of primary contact",
                        max_length=200,
                        verbose_name="Client Full Name",
                    ),
                ),
                (
                    "client_phone",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True,
                        help_text="Primary phone number",
                        max_length=128,
                        region=None,
                        verbose_name="Client Phone",
                    ),
                ),
                (
                    "client_email",
                    models.EmailField(
                        help_text="Primary email address",
                        max_length=254,
                        verbose_name="Client Email",
                    ),
                ),
                (
                    "note",
                    models.TextField(
                        blank=True,
                        help_text="Optional notes or special instructions",
                        verbose_name="Additional Notes",
                    ),
                ),
                (
                    "is_realtor",
                    models.BooleanField(
                        help_text="Whether there is a realtor involved in this deal",
                        verbose_name="Is Realtor Involved",
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        default="FL",
                        help_text="Property state (default: Florida)",
                        max_length=2,
                        verbose_name="State",
                    ),
                ),
                (
                    "parcel_id",
                    models.CharField(
                        help_text="Property parcel identification number",
                        max_length=50,
                        verbose_name="Parcel ID",
                    ),
                ),
                (
                    "other_model",
                    models.CharField(
                        blank=True,
                        help_text="Custom model name if 'Other' is selected",
                        max_length=100,
                        verbose_name="Other Model Name",
                    ),
                ),
                (
                    "has_hoa",
                    models.BooleanField(
                        help_text="Whether property has HOA or association",
                        verbose_name="Has HOA/Association",
                    ),
                ),
                (
                    "contract_value",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Expected contract value in USD",
                        max_digits=15,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("1000.00"))
                        ],
                        verbose_name="Contract Value",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="Created At"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="Last Updated"
                    ),
                ),
                (
                    "converted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When lead was converted to contract",
                        null=True,
                        verbose_name="Converted At",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "county",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="County where property is located",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.county",
                        verbose_name="County",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="User who created this lead",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "elevation",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Elevation specification for the house",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="leads.elevationchoice",
                        verbose_name="House Elevation",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "hoa",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Homeowners Association (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.hoa",
                        verbose_name="HOA",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Lead",
                "verbose_name_plural": "historical Leads",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
